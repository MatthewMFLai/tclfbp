#!/bin/sh 
# \
exec tclsh $0 $@
#exec tclsh "$0" ${1+"$@"}

set server_accept_template {
proc server_accept_xxx {cid addr port} {
    global g_ports
    global g_channels

    fileevent $cid readable "server_handle $cid"
    fconfigure $cid -buffering line
    set g_channels($cid) xxx 
}}

proc server_handle {cid} {
    global g_channels
    global g_chanlist
    global g_cid

    if {[gets $cid request] < 0} {
        close $cid
	unset g_channels($cid)
    } else {
        # Custom code to handle request
        #
	set rx_inport [lindex $request 0]
	set rx_request [lindex $request 1]
	set p_ip [ip::assemble $rx_request]

	set server_found 0
	foreach fd_server [array names g_chanlist] {
	    if {$g_chanlist($fd_server) == "AVAIL"} {
		set server_found 1
		break
	    }
	}
	if {$server_found == 0} {
	    return
	}

	if {[catch {pre_process $rx_inport $p_ip $fd_server} rc]} {
	    puts "rc = $rc"
	}
	ip::destroy $p_ip

	# Send ack back to rxmgr.
	set g_chanlist($fd_server) "BUSY"
	set g_cid $cid
    }
}

proc server_init {cid addr port} {
    fileevent $cid readable "server_handle_init $cid"
    fconfigure $cid -buffering line
}

proc server_handle_init {cid} {
    if {[gets $cid request] < 0} {
	global main-loop
        close $cid
	set main-loop 1
    } else {
        # Custom code to handle initialization. 
        #
        initialize $request
    }
}

proc initialize {request} {
    global g_channels
    global g_ports
    global g_logfile

    switch -- [lindex $request 0] {
        ENABLE {
	    foreach outport [array names g_ports "OUT-*"] {
    	    	set g_channels($outport) [socket localhost $g_ports($outport)]
		fconfigure $g_channels($outport) -buffering line
		puts "Initialized out port $outport"
	    }
	    # Set up log file. Check for custom log file name.
	    if {[string first "logfile=" [lindex $request end]] == 0} {
		set g_logfile [lindex [split [lindex $request end] "="] 1]
	    } else {
		set g_logfile $g_ports(INIT)
	    	append g_logfile ".log"
	    }

	    # Pass the list of data to component for initialization.
	    init [lrange $request 1 end] 
	    ready_file $g_ports(INIT)
        }
        DISABLE {
	    foreach cid [array names g_channels] {
		if {[string first "OUT-" $g_channels($cid)] == 0} {
		    close $cid
		}
	    }
	    shutdown
	    ready_file $g_ports(INIT)
        }
	TEST {
	    set outports [array names g_channels "OUT-*"]
	    if {[info commands kicker] == "kicker"} {
		kicker [lrange $request 1 end]
	    } else {
		puts "component $g_ports(PROGRAM) does not support kicker!"
	    }
	}
	default {

	}
    }
}

proc server_send {p_ip portid} {
    global g_channels

    if {$portid != ""} {
	set toloop 1
	while {$toloop} {
            catch {puts $g_channels($portid) [ip::serialize $p_ip]} rc
	    catch {flush $g_channels($portid)} rc
	    #puts "tx send data out"
	    catch {gets $g_channels($portid)} rc
	    if {$rc == "ACK"} {
		#puts "tx receive ACK"
		set toloop 0
	    }
	    # Sleep for 0.1 second?
	    after 100
	}
    }
}

proc server_log {mode data} {
    global g_logfile
    set fd [open $g_logfile a]
    puts $fd "[clock format [clock seconds]] $mode $data"
    flush $fd
    close $fd
}

proc get_server_id {} {
    global g_ports
    return $g_ports(INIT)
}

proc get_outports {} {
    global g_ports
    return [array names g_ports "OUT-*"]
}

proc ready_file {initport} {
    # Put a marker file to let the launcher know that
    # the sockets have been set up.
    set fd [open data_$initport.ready w]
    puts $fd ""
    close $fd
}

variable g_ports
variable g_channels
variable g_logfile
array set g_channels {}
array set g_outportt_status {}

# Passed in arguments should be of format
# "IN-<port number> <os port number> OUT-<port number> <os port number>
# eg.
# IN-1 9000 IN-2 9001 OUT-1 9002 OUT-2 9003 INIT 9004
set datalist $argv
# Why do we need to substitute the slash below?
if {$tcl_platform(os) == "Linux"} {
    regsub -all {\\} $datalist "" datalist
}
array set g_ports $datalist
#source $g_ports(PROGRAM)

# Source in pattern classes to handle ip and memory allocation.
source $env(COMP_HOME)/ip/malloc.tcl
source $env(COMP_HOME)/ip/ip.tcl
ip::init malloc
source $g_ports(PROGRAM)

set inport "IN-0"
# Need to bind the in port number to the handler procedure.
# Create a handler procedure on the fly, with the name
# server_accept_<inport>
regsub -all "xxx" $server_accept_template $inport server_proc
eval $server_proc

socket -server server_accept_$inport $g_ports($inport)

socket -server server_init $g_ports(INIT)

ready_file $g_ports(INIT)

### Code for multi pipe
set num_chan [lindex $argv 1] 
array set g_chanlist {} 
while {$num_chan > 0} {
    set fd_server [open "|tclsh process.tcl" "r+"]
    fconfigure $fd_server -buffering line
    fileevent $fd_server readable "post_process $fd_server"
    set g_chanlist($fd_server) "AVAIL"
}

proc post_process {server_ch} {
    global g_cid

    if {[gets $server_ch data] < 0} {
	catch {close $server_ch}
	return
    }

    # Send ack back to rxmgr.
    #puts "tx sends ACK to rx"
    catch {puts $g_cid "ACK"} rc
    flush $cid

    # Server available.
    set g_chanlist($server_ch) "AVAIL"
}

### end code for multi pipe

vwait main-loop

exit 0
