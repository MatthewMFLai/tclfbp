#!/bin/sh 
# \
exec tclsh $0 $@
#exec tclsh "$0" ${1+"$@"}

set server_accept_template {
proc server_accept_xxx {cid addr port} {
    global g_ports
    global g_channels

    fileevent $cid readable "server_handle $cid"
    fconfigure $cid -buffering line
    set g_channels($cid) xxx 
}}

proc server_handle {cid} {
    global g_channels
    global g_outport_status
    global g_ports
    global g_cur_request
    global g_state

    if {[gets $cid request] < 0} {
        close $cid
	unset g_channels($cid)
    } else {
	append g_cur_request($cid) $request
	if {[info complete $g_cur_request($cid)]} {
	    set request $g_cur_request($cid)
	    set g_cur_request($cid) ""
	} else {
	    global g_logfile
	    return
	}
	if {$g_state == "STATE_DRAIN"} {
	    # Send ack back to rxmgr.
	    catch {puts $cid "ACK"} rc
	    catch {flush $cid} rc
	    return
	}
        # Custom code to handle request
        #
	set rx_inport $g_channels($cid)
	set p_ip [ip::assemble $request]
	if {[catch {process $rx_inport $p_ip} rc]} {
	    puts "$g_ports(INIT) rc = $rc"
	}
	ip::destroy $p_ip

	# Send ack back to rxmgr.
	#puts "tx sends ACK to rx"
	catch {puts $cid "ACK"} rc
	flush $cid
    }
}

proc server_init {cid addr port} {
    fileevent $cid readable "server_handle_init $cid"
    fconfigure $cid -buffering line
}

proc server_handle_init {cid} {
    if {[gets $cid request] < 0} {
	global main-loop
        close $cid
	set main-loop 1
    } else {
        # Custom code to handle initialization. 
        #
	set response ""
        if {[initialize $request response]} {
	    puts $cid $response
	    flush $cid
	}
    }
}

proc initialize {request p_response} {
    global g_channels
    global g_ports
    global g_logfile
    global g_state

    upvar $p_response response
    set response ""
    set rc 0

    switch -- [lindex $request 0] {
        ENABLE {
	    foreach outport [get_outports] {
    	    	set g_channels($outport) [socket localhost $g_ports($outport)]
		fconfigure $g_channels($outport) -buffering line
		puts "Initialized out port $outport"
	    }
	    # Set up log file. Check for custom log file name.
	    if {[string first "logfile=" [lindex $request end]] == 0} {
		set g_logfile [lindex [split [lindex $request end] "="] 1]
	    } else {
		set g_logfile $g_ports(BLOCK)
	    	append g_logfile ".log"
	    }

	    # Kludge.
	    if {[string first "B4_" $g_ports(BLOCK)] > -1} {
	    	global g_testfile_fd
		global g_marker
		set g_marker 1
		set g_testfile_fd [open $g_ports(BLOCK)\_marker w]
	    }	 
	    # Pass the list of data to component for initialization.
	    init [lrange $request 1 end] 
	    ready_file $g_ports(INIT)

        }
	DRAIN {
	    set g_state "STATE_DRAIN"
	    ready_file $g_ports(INIT)
        }
        DISABLE {
	    # Kludge.
	    if {[string first "B4_" $g_ports(BLOCK)] > -1} {
	    	global g_testfile_fd
		close $g_testfile_fd
	    }	 
	    foreach cid [array names g_channels] {
		if {[string first "OUT-" $g_channels($cid)] == 0} {
		    close $cid
		}
	    }
	    shutdown
	    ready_file $g_ports(INIT)
        }
	TEST {
	    set outports [array names g_channels "OUT-*"]
	    if {[info commands kicker] == "kicker"} {
		kicker [lrange $request 1 end]
	    } else {
		puts "component $g_ports(PROGRAM) does not support kicker!"
	    }
	}
	PID {
	    set response [pid]
	    #after 30000 alive_alert
	    set rc 1
	}
	default {

	}
    }
    return $rc
}

proc alive_alert {} {
    global g_logfile

    set idx [string first ":" $g_logfile]
    incr idx
    set idx2 [string first "." $g_logfile]
    incr idx2 -1
    puts "[string range $g_logfile $idx $idx2] is alive..."
    after 30000 alive_alert
}

proc server_send {p_ip portid} {
    global g_channels
    global g_logfile

    if {$portid != ""} {
	set toloop 1
	while {$toloop} {
            set tmpdata [ip::serialize $p_ip]
	    # Kludge.
	    global g_ports
	    if {[string first "B4_" $g_ports(BLOCK)] > -1 &&
                 $portid != "OUT-2"} {
		global g_marker
		set tmpdata [concat $tmpdata [list marker $g_ports(BLOCK)\_$g_marker]]
		incr g_marker
	    }
            if {[catch {puts $g_channels($portid) $tmpdata} rc]} {
		puts "send to $portid error: $rc"
		break
	    }
	    if {[catch {flush $g_channels($portid)} rc]} {
		puts "txmgr send error: $rc"
		return
	    }
	    if {[string first "B4_" $g_ports(BLOCK)] > -1 &&
                $portid != "OUT-2"} {
	    	global g_testfile_fd
		#puts $g_testfile_fd [lindex $tmpdata end]
		#flush $g_testfile_fd
	    }
	    catch {gets $g_channels($portid)} rc
	    if {$rc == "ACK"} {
		#puts "tx receive ACK"
		set toloop 0
	    } else {
	        # Sleep for 0.01 second?
		# We should not reach the else portion!	
	        after 10
	    }
	}
    }
}

proc server_log {mode data} {
    global g_logfile
    set fd [open $g_logfile a]
    puts $fd "[clock format [clock seconds]] $mode $data"
    flush $fd
    close $fd
}

proc get_server_id {} {
    global g_ports
    return $g_ports(INIT)
}

proc get_inports {} {
    global g_ports
    return [array names g_ports "IN-*"]
}

proc get_outports {} {
    global g_ports
    return [array names g_ports "OUT-*"]
}

proc ready_file {initport} {
    # Put a marker file to let the launcher know that
    # the sockets have been set up.
    set fd [open data_$initport.ready w]
    puts $fd ""
    close $fd
}

variable g_ports
variable g_channels
variable g_logfile
variable g_outport_status
variable g_state
array set g_channels {}
array set g_outportt_status {}
set g_state "STATE_RUNNING"

variable g_cur_request
array set g_cur_request {}
 
# Passed in arguments should be of format
# "IN-<port number> <os port number> OUT-<port number> <os port number>
# eg.
# IN-1 9000 IN-2 9001 OUT-1 9002 OUT-2 9003 INIT 9004
set datalist $argv
# Why do we need to substitute the slash below?
if {$tcl_platform(os) == "Linux"} {
    regsub -all {\\} $datalist "" datalist
}
array set g_ports $datalist
#source $g_ports(PROGRAM)

# Source in pattern classes to handle ip and memory allocation.
#source $env(COMP_HOME)/ip/malloc.tcl
source $env(PATTERN_HOME)/malloc.tcl
source $env(COMP_HOME)/ip/ip.tcl
ip::init malloc
source $g_ports(PROGRAM)

foreach inport [get_inports] { 
    # Need to bind the in port number to the handler procedure.
    # Create a handler procedure on the fly, with the name
    # server_accept_<inport>
    regsub -all "xxx" $server_accept_template $inport server_proc
    eval $server_proc

    socket -server server_accept_$inport $g_ports($inport)
}

socket -server server_init $g_ports(INIT)

ready_file $g_ports(INIT)

vwait main-loop

exit 0
